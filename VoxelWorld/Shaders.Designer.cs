//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VoxelWorld {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Shaders {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Shaders() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("VoxelWorld.Shaders", typeof(Shaders).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 14.7KB
        ///
        ///Shader &quot;Futile/Decal&quot; {
        ///Properties {
        /// _MainTex (&quot;Base (RGB) Trans (A)&quot;, 2D) = &quot;white&quot; {}
        ///}
        ///SubShader { 
        /// Tags { &quot;QUEUE&quot;=&quot;Transparent&quot; &quot;IGNOREPROJECTOR&quot;=&quot;true&quot; &quot;RenderType&quot;=&quot;Transparent&quot; }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 7 math
        /// // Stats for Fragment shader:
        /// //       d3d11 : 133 math, 11 texture, 9 branch
        /// Pass {
        ///  Tags { &quot;QUEUE&quot;=&quot;Transparent&quot; &quot;IGNOREPROJECTOR&quot;=&quot;true&quot; &quot;RenderType&quot;=&quot;Transparent&quot; }
        ///  BindChannels {
        ///   Bind &quot;vert [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Decal {
            get {
                return ResourceManager.GetString("Decal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 8.4KB
        ///
        ///Shader &quot;Futile/Fog&quot; {
        ///Properties {
        /// _MainTex (&quot;Base (RGB) Trans (A)&quot;, 2D) = &quot;white&quot; {}
        ///}
        ///SubShader { 
        /// Tags { &quot;QUEUE&quot;=&quot;Transparent&quot; &quot;IGNOREPROJECTOR&quot;=&quot;true&quot; &quot;RenderType&quot;=&quot;Transparent&quot; }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 7 math
        /// // Stats for Fragment shader:
        /// //       d3d11 : 60 math, 6 texture, 4 branch
        /// Pass {
        ///  Tags { &quot;QUEUE&quot;=&quot;Transparent&quot; &quot;IGNOREPROJECTOR&quot;=&quot;true&quot; &quot;RenderType&quot;=&quot;Transparent&quot; }
        ///  BindChannels {
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Fog {
            get {
                return ResourceManager.GetString("Fog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 16.1KB
        ///
        ///Shader &quot;Futile/LevelColor&quot; {
        ///Properties {
        /// _MainTex (&quot;Base (RGB) Trans (A)&quot;, 2D) = &quot;white&quot; {}
        ///}
        ///SubShader { 
        /// Tags { &quot;QUEUE&quot;=&quot;Transparent&quot; &quot;IGNOREPROJECTOR&quot;=&quot;true&quot; &quot;RenderType&quot;=&quot;Transparent&quot; }
        /// GrabPass {
        /// }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 5 math
        /// // Stats for Fragment shader:
        /// //       d3d11 : 150 math, 18 texture, 9 branch
        /// Pass {
        ///  Tags { &quot;QUEUE&quot;=&quot;Transparent&quot; &quot;IGNOREPROJECTOR&quot;=&quot;true&quot; &quot;RenderType&quot;=&quot;Transparent&quot; }
        ///  BindChan [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LevelColor {
            get {
                return ResourceManager.GetString("LevelColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 9.9KB
        ///
        ///Shader &quot;Futile/VoxelChunk&quot; {
        ///Properties {
        /// _MainTex (&quot;Voxels&quot;, 3D) = &quot;white&quot; {}
        ///}
        ///SubShader { 
        /// LOD 100
        /// Tags { &quot;QUEUE&quot;=&quot;AlphaTest&quot; &quot;RenderType&quot;=&quot;Voxels&quot; }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 10 math
        /// // Stats for Fragment shader:
        /// //       d3d11 : 83 math, 3 branch
        /// Pass {
        ///  Tags { &quot;QUEUE&quot;=&quot;AlphaTest&quot; &quot;RenderType&quot;=&quot;Voxels&quot; }
        ///  ZTest Less
        ///Program &quot;vp&quot; {
        ///SubProgram &quot;d3d11 &quot; {
        ///// Stats: 10 math
        ///Bind &quot;vertex&quot; Vertex
        ///Bind &quot;color&quot; Color [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VoxelChunk {
            get {
                return ResourceManager.GetString("VoxelChunk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 11.6KB
        ///
        ///Shader &quot;Futile/VoxelDepth&quot; {
        ///SubShader { 
        /// LOD 100
        /// Tags { &quot;QUEUE&quot;=&quot;AlphaTest&quot; &quot;RenderType&quot;=&quot;Voxels&quot; }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 10 math
        /// // Stats for Fragment shader:
        /// //       d3d11 : 49 math, 3 branch
        /// Pass {
        ///  Tags { &quot;QUEUE&quot;=&quot;AlphaTest&quot; &quot;RenderType&quot;=&quot;Voxels&quot; }
        ///  ZTest Less
        ///Program &quot;vp&quot; {
        ///SubProgram &quot;d3d11 &quot; {
        ///// Stats: 10 math
        ///Bind &quot;vertex&quot; Vertex
        ///Bind &quot;color&quot; Color
        ///ConstBuffer &quot;UnityPerCamera&quot; 128
        ///Vector 64 [_WorldS [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VoxelDepth {
            get {
                return ResourceManager.GetString("VoxelDepth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Compiled shader for all platforms, uncompressed size: 2.3KB
        ///
        ///Shader &quot;Custom/VoxelLightCookie&quot; {
        ///Properties {
        /// _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; {}
        ///}
        ///SubShader { 
        /// LOD 200
        /// Tags { &quot;QUEUE&quot;=&quot;AlphaTest&quot; &quot;RenderType&quot;=&quot;VoxelLightCookie&quot; }
        ///
        ///
        /// // Stats for Vertex shader:
        /// //       d3d11 : 5 math
        /// Pass {
        ///  Tags { &quot;QUEUE&quot;=&quot;AlphaTest&quot; &quot;RenderType&quot;=&quot;VoxelLightCookie&quot; }
        ///  ZTest Always
        ///  Cull Off
        ///Program &quot;vp&quot; {
        ///SubProgram &quot;d3d11 &quot; {
        ///// Stats: 5 math
        ///Bind &quot;vertex&quot; Vertex
        ///Bind &quot;texcoord&quot; TexCoord0
        ///ConstBuffer &quot;$Glob [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VoxelLightCookie {
            get {
                return ResourceManager.GetString("VoxelLightCookie", resourceCulture);
            }
        }
    }
}
